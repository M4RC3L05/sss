export type KeyExists<T, K extends string | number | symbol> = K extends keyof T ? true : false;
export type IsNodeRuntime = KeyExists<typeof globalThis, "NodeJS">;
export type IsBunRuntime = KeyExists<typeof globalThis, "Bun">;
export type IsDenoRuntime = KeyExists<typeof globalThis, "Deno">;
export type NodeRuntime = "node";
export type BunRuntime = "bun";
export type DenoRuntime = "deno";
export type WebRuntime = BunRuntime | DenoRuntime;
export type JsRuntime = NodeRuntime | WebRuntime;
export type CurrentJsRuntime = IsNodeRuntime extends true ? NodeRuntime : IsBunRuntime extends true ? BunRuntime : IsDenoRuntime extends true ? DenoRuntime : never;
export type RouteRequestExtras = {
    params: Record<string, string | undefined>;
    searchParams: Record<string, string>;
};
export type RouteRequest = Request & RouteRequestExtras;
export type RouteIncomingMessage = import("node:http").IncomingMessage & RouteRequestExtras;
export type NodeNext = () => Promise<void> | void;
export type WebNext = () => Promise<Response> | Response;
export type Middleware<R extends JsRuntime = CurrentJsRuntime> = R extends NodeRuntime ? NodeMiddleware : R extends WebRuntime ? WebMiddleware : never;
export type NodeMiddleware = (request: import("node:http").IncomingMessage, response: import("node:http").ServerResponse, next: NodeNext) => Promise<void> | void;
export type WebMiddleware = (request: Request, next: WebNext) => Promise<Response> | Response;
export type RouteMiddleware<R extends JsRuntime = CurrentJsRuntime> = R extends NodeRuntime ? NodeRouteMiddleware : R extends WebRuntime ? WebRouteMiddleware : never;
export type NodeRouteMiddleware = (request: RouteIncomingMessage, response: import("node:http").ServerResponse, next: NodeNext) => Promise<void> | void;
export type WebRouteMiddleware = (request: RouteRequest, next: WebNext) => Promise<Response> | Response;
export type Handler<R extends JsRuntime = CurrentJsRuntime> = R extends NodeRuntime ? NodeHandler : R extends WebRuntime ? WebHandler : never;
export type NodeHandler = (request: import("node:http").IncomingMessage, response: import("node:http").ServerResponse) => Promise<void> | void;
export type WebHandler = (request: Request) => Promise<Response> | Response;
export type ErrorHandler<R extends JsRuntime = CurrentJsRuntime> = R extends NodeRuntime ? NodeErrorHandler : R extends WebRuntime ? WebErrorHandler : never;
export type NodeErrorHandler = (error: unknown, request: import("node:http").IncomingMessage, response: import("node:http").ServerResponse) => Promise<void> | void;
export type WebErrorHandler = (error: unknown, request: Request) => Promise<Response> | Response;
